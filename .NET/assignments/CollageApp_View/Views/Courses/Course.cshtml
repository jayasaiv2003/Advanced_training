@{
    ViewData["Title"] = "Courses";
}

<!--  Bootstrap & Icons -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet" />

<div class="container my-5">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="text-primary"><i class="bi bi-journal-bookmark-fill"></i> Course List</h2>
        <button id="addCourseBtn" class="btn btn-success">
            <i class="bi bi-plus-circle"></i> Add Course
        </button>
    </div>

    <!--Search by Course ID -->
    <div class="input-group mb-3">
        <input type="number" id="searchCourseId" class="form-control" placeholder="Enter Course ID" />
        <button id="searchCourseBtn" class="btn btn-outline-primary"><i class="bi bi-search"></i> Search</button>
        <button id="resetSearchBtn" class="btn btn-outline-secondary"><i class="bi bi-arrow-clockwise"></i> Reset</button>
    </div>

    <div class="card shadow-lg p-4">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <button id="loadBtn" class="btn btn-primary">
                <i class="bi bi-arrow-clockwise"></i> Load All Courses
            </button>

            <!-- Dropdown Filter -->
            <div class="d-flex align-items-center">
                <label class="me-2 fw-semibold text-secondary">Filter by Department:</label>
                <select id="deptDropdown" class="form-select" style="width: 220px;">
                    <option value="">-- All Departments --</option>
                </select>
            </div>
        </div>

        <div id="courses" class="table-responsive"></div>
    </div>
</div>

<!--  Modal -->
<div class="modal fade" id="courseModal" tabindex="-1" aria-labelledby="courseModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="courseModalLabel">Add / Edit Course</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="courseForm">
                    <input type="hidden" id="courseId" />

                    <div class="mb-3">
                        <label for="courseCode" class="form-label">Course Code</label>
                        <input type="text" id="courseCode" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="courseName" class="form-label">Course Name</label>
                        <input type="text" id="courseName" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="department" class="form-label">Department</label>
                        <input type="text" id="department" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="semester" class="form-label">Semester</label>
                        <input type="number" id="semester" class="form-control" required />
                    </div>

                    <button type="submit" class="btn btn-primary w-100 mt-3">Save</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- 🧑‍🎓 Students Modal -->
<div class="modal fade" id="studentsModal" tabindex="-1" aria-labelledby="studentsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-info text-white">
                <h5 class="modal-title" id="studentsModalLabel">Students in this Course</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="studentsTableContainer"></div>
            </div>
        </div>
    </div>
</div>


<!-- ✅ jQuery + Bootstrap JS -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

<script>
    let coursesData = [];
    let filteredCourses = [];
    let currentPage = 1;
    const pageSize = 5;

    // ✅ Load All Courses
    $("#loadBtn").click(function () {
        const token = localStorage.getItem("jwtToken");
        if (!token) {
            alert("Please login first!");
            window.location.href = "/Auth/Login";
            return;
        }

        $.ajax({
            url: "https://localhost:7104/api/Course_App/getallcourses",
            type: "GET",
            headers: { "Authorization": "Bearer " + token },
            success: function (data) {
                coursesData = data;
                filteredCourses = data;
                populateDeptDropdown(data);
                currentPage = 1;
                renderTable();
            },
            error: function () {
                $("#courses").html("<p class='text-danger'>Error fetching courses.</p>");
            }
        });
    });

    // ✅ Populate Department Dropdown
    function populateDeptDropdown(data) {
        let departments = [...new Set(data.map(c => c.department))];
        let options = "<option value=''>-- All Departments --</option>";
        departments.forEach(d => options += `<option value="${d}">${d}</option>`);
        $("#deptDropdown").html(options);
    }

    // ✅ Filter Locally by Department
    $("#deptDropdown").change(function () {
        const selectedDept = $(this).val();
        filteredCourses = selectedDept
            ? coursesData.filter(c => c.department === selectedDept)
            : coursesData;
        currentPage = 1;
        renderTable();
    });

    // ✅ Render Table with Pagination
    function renderTable() {
        if (!filteredCourses || filteredCourses.length === 0) {
            $("#courses").html("<p class='text-muted text-center'>No courses found.</p>");
            return;
        }

        const totalPages = Math.ceil(filteredCourses.length / pageSize);
        const start = (currentPage - 1) * pageSize;
        const end = start + pageSize;
        const paginated = filteredCourses.slice(start, end);

        let html = `
        <table class='table table-hover align-middle text-center'>
            <thead class='table-dark'>
                <tr>
                    <th>Course ID</th>
                    <th>Code</th>
                    <th>Name</th>
                    <th>Department</th>
                    <th>Semester</th>
                    <th>Actions</th>
                </tr>
            </thead><tbody>`;

        paginated.forEach(c => {
            html += `
            <tr>
                <td>${c.courseId}</td>
                <td>${c.courseCode}</td>
                <td>${c.courseName}</td>
                <td>${c.department}</td>
                <td>${c.semester}</td>
                    <td>
        <button class='btn btn-info btn-sm me-2 viewStudentsBtn' data-id='${c.courseId}'>
            <i class='bi bi-people'></i> View Students
        </button>
        <button class='btn btn-warning btn-sm me-2 editBtn' data-id='${c.courseId}'>
            <i class='bi bi-pencil'></i> Edit
        </button>
        <button class='btn btn-danger btn-sm deleteBtn' data-id='${c.courseId}'>
            <i class='bi bi-trash'></i> Delete
        </button>
    </td>

            </tr>`;
        });

        html += `
            </tbody>
        </table>

        <!-- ✅ Pagination Controls -->
        <div class='d-flex justify-content-between align-items-center mt-3'>
            <button class='btn btn-outline-primary btn-sm' id='prevPage' ${currentPage === 1 ? "disabled" : ""}>
                <i class='bi bi-arrow-left'></i> Previous
            </button>
            <span class='fw-semibold text-secondary'>Page ${currentPage} of ${totalPages}</span>
            <button class='btn btn-outline-primary btn-sm' id='nextPage' ${currentPage === totalPages ? "disabled" : ""}>
                Next <i class='bi bi-arrow-right'></i>
            </button>
        </div>
        `;

        $("#courses").html(html);

        $("#prevPage").click(() => {
            if (currentPage > 1) {
                currentPage--;
                renderTable();
            }
        });

        $("#nextPage").click(() => {
            if (currentPage < totalPages) {
                currentPage++;
                renderTable();
            }
        });
    }

    // ✅ Search by ID
    $("#searchCourseBtn").click(function () {
        const id = $("#searchCourseId").val().trim();
        const token = localStorage.getItem("jwtToken");

        if (!token) {
            alert("Please login first!");
            window.location.href = "/Auth/Login";
            return;
        }

        $.ajax({
            url: `https://localhost:7104/api/Course_App/${id}`,
            type: "GET",
            headers: { "Authorization": "Bearer " + token },
            success: function (data) {
                filteredCourses = [data];
                renderTable();
            },
            error: function () {
                $("#courses").html("<p class='text-danger'>Course not found.</p>");
            }
        });
    });

    // ✅ Reset
    $("#resetSearchBtn").click(function () {
        $("#searchCourseId").val("");
        $("#deptDropdown").val("");
        filteredCourses = coursesData;
        currentPage = 1;
        renderTable();
    });

    // ✅ Add
    $("#addCourseBtn").click(function () {
        $("#courseForm")[0].reset();
        $("#courseId").val('');
        $("#courseModalLabel").text("Add Course");
        $("#courseModal").modal("show");
    });

    // ✅ Edit
    $(document).on("click", ".editBtn", function () {
        const id = $(this).data("id");
        const course = coursesData.find(c => c.courseId === id);
        if (course) {
            $("#courseId").val(course.courseId);
            $("#courseCode").val(course.courseCode);
            $("#courseName").val(course.courseName);
            $("#department").val(course.department);
            $("#semester").val(course.semester);
            $("#courseModalLabel").text("Edit Course");
            $("#courseModal").modal("show");
        }
    });

    // ✅ Delete
    $(document).on("click", ".deleteBtn", function () {
        const id = $(this).data("id");
        const token = localStorage.getItem("jwtToken");
        if (confirm("Are you sure you want to delete this course?")) {
            $.ajax({
                url: `https://localhost:7104/api/Course_App/DeleteCourse/${id}`,
                type: "DELETE",
                headers: { "Authorization": "Bearer " + token },
                success: function () {
                    alert("Course deleted successfully!");
                    $("#loadBtn").click();
                },
                error: function () {
                    alert("Error deleting course.");
                }
            });
        }
    });

    // ✅ Submit Add/Edit
    $("#courseForm").submit(function (e) {
        e.preventDefault();

        const token = localStorage.getItem("jwtToken");
        if (!token) {
            alert("Please login first!");
            window.location.href = "/Auth/Login";
            return;
        }

        const course = {
            courseId: $("#courseId").val() || 0,
            courseCode: $("#courseCode").val(),
            courseName: $("#courseName").val(),
            department: $("#department").val(),
            semester: parseInt($("#semester").val())
        };

        const isEdit = course.courseId > 0;
        const apiUrl = isEdit
            ? "https://localhost:7104/api/Course_App/UpdateCourse"
            : "https://localhost:7104/api/Course_App/Createnewcourse";

        $.ajax({
            url: apiUrl,
            type: isEdit ? "PUT" : "POST",
            headers: { "Authorization": "Bearer " + token },
            contentType: "application/json",
            data: JSON.stringify(course),
            success: function () {
                $("#courseModal").modal("hide");
                $("#loadBtn").click();
            },
            error: function () {
                alert("Error saving course.");
            }
        });
    });

        // ✅ Role-based UI restrictions
        $(document).ready(function () {
        const userRole = localStorage.getItem("userRole");

        if (userRole === "Student") {
            // Hide "Add Course" button
            $("#addCourseBtn").hide();

            // Intercept renderTable to also hide edit/delete buttons
            const originalRenderTable = renderTable;
            renderTable = function () {
                originalRenderTable(); // Run the original table rendering
                $(".editBtn, .deleteBtn").hide(); // Hide action buttons
            };
        }
    });

        // ✅ View Students Button Click
    $(document).on("click", ".viewStudentsBtn", function () {
        const courseId = $(this).data("id");
        const course = coursesData.find(c => c.courseId === courseId);

        if (!course) {
            alert("Course not found!");
            return;
        }

        // Update modal title
        $("#studentsModalLabel").text(`Students in ${course.courseName}`);

        // Check if there are students
        if (!course.students || course.students.length === 0) {
            $("#studentsTableContainer").html("<p class='text-muted text-center'>No students enrolled.</p>");
        } else {
            let tableHtml = `
            <table class='table table-bordered table-hover text-center align-middle'>
                <thead class='table-light'>
                    <tr>
                        <th>Student ID</th>
                        <th>Roll No</th>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Phone</th>
                        <th>Gender</th>
                    </tr>
                </thead>
                <tbody>`;

            course.students.forEach(s => {
                tableHtml += `
                <tr>
                    <td>${s.studentId}</td>
                    <td>${s.rollNumber}</td>
                    <td>${s.name}</td>
                    <td>${s.email}</td>
                    <td>${s.phone}</td>
                    <td>${s.gender}</td>
                </tr>`;
            });

            tableHtml += "</tbody></table>";
            $("#studentsTableContainer").html(tableHtml);
        }

        // Show modal
        $("#studentsModal").modal("show");
    });


</script>
