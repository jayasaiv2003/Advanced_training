@{
    ViewData["Title"] = "Students";
}

<!-- ✅ Bootstrap CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet" />

<div class="container my-5">

    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="text-primary"><i class="bi bi-mortarboard-fill"></i> Student List</h2>
        <div>
            <!-- ✅ New "Go to Courses" button -->
            <button id="goToCoursesBtn" class="btn btn-outline-primary me-2">
                <i class="bi bi-journal-bookmark"></i> Go to Courses
            </button>

            <button id="addStudentBtn" class="btn btn-success">
                <i class="bi bi-person-plus"></i> Add Student
            </button>
        </div>
    </div>

    <!-- 🔍 Search by ID -->
    <div class="input-group mb-3">
        <input type="number" id="searchStudentId" class="form-control" placeholder="Enter Student ID" />
        <button id="searchStudentBtn" class="btn btn-outline-primary">
            <i class="bi bi-search"></i> Search
        </button>
        <button id="resetSearchBtn" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-clockwise"></i> Reset
        </button>
    </div>

    <div class="card shadow-lg p-4">
        <div class="d-flex justify-content-between mb-3">
            <button id="loadBtn" class="btn btn-primary">
                <i class="bi bi-arrow-clockwise"></i> Load All Students
            </button>

            <!-- ✅ Dropdown Filter -->
            <div class="d-flex align-items-center">
                <label class="me-2 fw-semibold text-secondary">Filter by Name:</label>
                <select id="studentDropdown" class="form-select" style="width: 200px;">
                    <option value="">-- Select Name --</option>
                </select>
            </div>
        </div>

        <div id="students" class="table-responsive"></div>
    </div>
</div>

<!-- ✅ Modal for Add/Edit Student -->
<div class="modal fade" id="studentModal" tabindex="-1" aria-labelledby="studentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="studentModalLabel">Add / Edit Student</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="studentForm">
                    <input type="hidden" id="studentId" />

                    <div class="row g-3">
                        <div class="col-md-6">
                            <label for="name" class="form-label fw-semibold">Full Name</label>
                            <input type="text" id="name" class="form-control" placeholder="Enter name" required />
                        </div>
                        <div class="col-md-6">
                            <label for="rollNumber" class="form-label fw-semibold">Roll Number</label>
                            <input type="text" id="rollNumber" class="form-control" placeholder="Enter roll number" required />
                        </div>
                        <div class="col-md-6">
                            <label for="email" class="form-label fw-semibold">Email</label>
                            <input type="email" id="email" class="form-control" placeholder="Enter email" required />
                        </div>
                        <div class="col-md-6">
                            <label for="phone" class="form-label fw-semibold">Phone</label>
                            <input type="text" id="phone" class="form-control" placeholder="Enter phone number" required />
                        </div>
                        <div class="col-md-6">
                            <label for="address" class="form-label fw-semibold">Address</label>
                            <input type="text" id="address" class="form-control" placeholder="Enter address" />
                        </div>
                        <div class="col-md-6">
                            <label for="gender" class="form-label fw-semibold">Gender</label>
                            <select id="gender" class="form-select" required>
                                <option value="">Select Gender</option>
                                <option value="Male">Male</option>
                                <option value="Female">Female</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label for="dateOfBirth" class="form-label fw-semibold">Date of Birth</label>
                            <input type="date" id="dateOfBirth" class="form-control" required />
                        </div>
                        <div class="col-md-6">
                            <label for="courseId" class="form-label fw-semibold">Course ID</label>
                            <input type="number" id="courseId" class="form-control" placeholder="Enter course ID" required />
                        </div>
                    </div>

                    <button type="submit" class="btn btn-primary w-100 mt-4">Save</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- ✅ jQuery + Bootstrap JS -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

<script>
    let studentsData = [];
    let filteredData = [];
    let currentPage = 1;
    const pageSize = 5;

     $("#goToCoursesBtn").click(function () {
        window.location.href = "/Courses/Course"; // 🔁 Change path if your Course page URL differs
    });

    // ✅ Load All Students
    $("#loadBtn").click(function () {
        const token = localStorage.getItem("jwtToken");
        if (!token) {
            alert("Please login first!");
            window.location.href = "/Auth/Login";
            return;
        }

        $.ajax({
            url: "https://localhost:7104/api/Student_App/getallstudents",
            type: "GET",
            headers: { "Authorization": "Bearer " + token },
            success: function (data) {
                studentsData = data;
                filteredData = data;
                populateDropdown(data);
                currentPage = 1;
                renderTable();
            },
            error: function () {
                $("#students").html("<p class='text-danger'>Error fetching data.</p>");
            }
        });
    });

    // ✅ Populate Dropdown with Names
    function populateDropdown(data) {
        let options = "<option value=''>-- Select Name --</option>";
        data.forEach(s => {
            options += `<option value="${s.name}">${s.name}</option>`;
        });
        $("#studentDropdown").html(options);
    }

    // ✅ Filter Locally by Name
    $("#studentDropdown").change(function () {
        const selectedName = $(this).val();
        filteredData = selectedName
            ? studentsData.filter(s => s.name === selectedName)
            : studentsData;

        currentPage = 1;
        renderTable();
    });

    // ✅ Render Table with Pagination
    function renderTable() {
        if (!filteredData || filteredData.length === 0) {
            $("#students").html("<p class='text-muted text-center'>No students found.</p>");
            return;
        }

        const totalPages = Math.ceil(filteredData.length / pageSize);
        const start = (currentPage - 1) * pageSize;
        const end = start + pageSize;
        const paginated = filteredData.slice(start, end);

        let html = `
            <table class='table table-hover align-middle text-center'>
                <thead class='table-dark'>
                    <tr>
                        <th>ID</th>
                        <th>Roll</th>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Phone</th>
                        <th>Gender</th>
                        <th>Course ID</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
        `;

        paginated.forEach(s => {
            html += `
                <tr>
                    <td>${s.studentId}</td>
                    <td>${s.rollNumber}</td>
                    <td>${s.name}</td>
                    <td>${s.email}</td>
                    <td>${s.phone}</td>
                    <td>${s.gender}</td>
                    <td>${s.courseId}</td>
                    <td>
                        <button class='btn btn-warning btn-sm me-2 editBtn' data-id='${s.studentId}'>
                            <i class='bi bi-pencil-square'></i> Edit
                        </button>
                        <button class='btn btn-danger btn-sm deleteBtn' data-id='${s.studentId}'>
                            <i class='bi bi-trash'></i> Delete
                        </button>
                    </td>
                </tr>`;
        });

        html += `
                </tbody>
            </table>

            <!-- ✅ Pagination Controls -->
            <div class='d-flex justify-content-between align-items-center mt-3'>
                <button class='btn btn-outline-primary btn-sm' id='prevPage' ${currentPage === 1 ? "disabled" : ""}>
                    <i class='bi bi-arrow-left'></i> Previous
                </button>
                <span class='fw-semibold text-secondary'>Page ${currentPage} of ${totalPages}</span>
                <button class='btn btn-outline-primary btn-sm' id='nextPage' ${currentPage === totalPages ? "disabled" : ""}>
                    Next <i class='bi bi-arrow-right'></i>
                </button>
            </div>
        `;

        $("#students").html(html);

        $("#prevPage").click(() => {
            if (currentPage > 1) {
                currentPage--;
                renderTable();
            }
        });

        $("#nextPage").click(() => {
            if (currentPage < totalPages) {
                currentPage++;
                renderTable();
            }
        });
    }

    // ✅ Search Student by ID
    $("#searchStudentBtn").click(function () {
        const id = $("#searchStudentId").val().trim();

        const token = localStorage.getItem("jwtToken");

        if (!token) {
            alert("Please login first!");
            window.location.href = "/Auth/Login";
            return;
        }
        if (!id) return alert("Please enter a Student ID.");

        $.ajax({
            url: `https://localhost:7104/api/Student_App/${id}`,
            type: "GET",
            headers: { "Authorization": "Bearer " + token },
            success: function (data) {
                renderTable([data]);
            },
            error: function () {
                $("#students").html("<p class='text-danger'>Student not found.</p>");
            }
        });
    });

    // ✅ Reset
    $("#resetSearchBtn").click(function () {
        $("#searchStudentId").val("");
        $("#loadBtn").click();
    });

    // ✅ Add
    $("#addStudentBtn").click(function () {
        $("#studentForm")[0].reset();
        $("#studentId").val('');
        $("#studentModalLabel").text("Add Student");
        $("#studentModal").modal("show");
    });

    // ✅ Edit
    $(document).on("click", ".editBtn", function () {
        const id = $(this).data("id");
        const student = studentsData.find(s => s.studentId === id);
        if (student) {
            $("#studentId").val(student.studentId);
            $("#rollNumber").val(student.rollNumber);
            $("#name").val(student.name);
            $("#email").val(student.email);
            $("#phone").val(student.phone);
            $("#address").val(student.address);
            $("#gender").val(student.gender);
            $("#dateOfBirth").val(student.dateOfBirth.split('T')[0]);
            $("#courseId").val(student.courseId);
            $("#studentModalLabel").text("Edit Student");
            $("#studentModal").modal("show");
        }
    });

    // ✅ Delete
    $(document).on("click", ".deleteBtn", function () {
        const id = $(this).data("id");
        const token = localStorage.getItem("jwtToken");

        if (!token) {
            alert("Please login first!");
            window.location.href = "/Auth/Login";
            return;
        }
        if (confirm("Are you sure you want to delete this student?")) {
            $.ajax({
                url: `https://localhost:7104/api/Student_App/DeleteStudent/${id}`,
                type: "DELETE",
                headers: { "Authorization": "Bearer " + token },
                success: function () {
                    alert("Student deleted successfully!");
                    $("#loadBtn").click();
                },
                error: function () {
                    alert("Error deleting student.");
                }
            });
        }
    });

    // ✅ Submit Add/Edit
    $("#studentForm").submit(function (e) {
        e.preventDefault();


        const token = localStorage.getItem("jwtToken");
        if (!token) {
            alert("Please login first!");
            window.location.href = "/Auth/Login";
            return;
        }

        const student = {
            studentId: $("#studentId").val() || 0,
            rollNumber: $("#rollNumber").val(),
            name: $("#name").val(),
            email: $("#email").val(),
            phone: $("#phone").val(),
            address: $("#address").val(),
            gender: $("#gender").val(),
            dateOfBirth: $("#dateOfBirth").val(),
            courseId: parseInt($("#courseId").val())
        };

        const isEdit = student.studentId > 0;
        const apiUrl = isEdit
            ? "https://localhost:7104/api/Student_App/Update"
            : "https://localhost:7104/api/Student_App/Createnewstudent";

        $.ajax({
            url: apiUrl,
            type: isEdit ? "PUT" : "POST",
            headers: { "Authorization": "Bearer " + token },
            contentType: "application/json",
            data: JSON.stringify(student),
            success: function () {
                $("#studentModal").modal("hide");
                $("#loadBtn").click();
            },
            error: function () {
                alert("Error saving student.");
            }
        });
    });

        // ✅ Role-based UI restrictions
        // ✅ Role-based UI restrictions
    $(document).ready(function () {
        const userRole = localStorage.getItem("userRole");

        if (userRole === "Student") {
            // Hide "Add Student" button
            $("#addStudentBtn").hide();

            // Intercept renderTable to also hide edit/delete buttons
            const originalRenderTable = renderTable;
            renderTable = function () {
                originalRenderTable(); // Call original logic

                // Hide Edit/Delete buttons for students
                $(".editBtn, .deleteBtn").hide();
            };

            // Prevent students from submitting add/edit form directly
            $("#studentForm").off("submit").on("submit", function (e) {
                e.preventDefault();
                alert("You do not have permission to modify student records.");
            });
        }
    });


</script>
